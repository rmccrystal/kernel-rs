/* automatically generated by rust-bindgen 0.56.0 */

pub const _STL_COMPILER_PREPROCESSOR: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const NULL: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 1;
pub const _STL_WARNING_LEVEL: u32 = 3;
pub const _HAS_IF_CONSTEXPR: u32 = 1;
pub const _HAS_CONDITIONAL_EXPLICIT: u32 = 1;
pub const _STL_DISABLED_WARNING_C4984: u32 = 4984;
pub const _STL_DISABLED_WARNING_C5053: u32 = 5053;
pub const _CPPLIB_VER: u32 = 650;
pub const _MSVC_STL_VERSION: u32 = 142;
pub const _MSVC_STL_UPDATE: u32 = 202008;
pub const _HAS_STATIC_RTTI: u32 = 1;
pub const _HAS_STD_BYTE: u32 = 0;
pub const _ENFORCE_MATCHING_ALLOCATORS: u32 = 0;
pub const _ENFORCE_FACET_SPECIALIZATIONS: u32 = 0;
pub const _FACET_SPECIALIZATION_MESSAGE : & 'static [u8 ; 183usize] = b"Unsupported facet specialization; see N4800 27.3.1.1.1 [locale.category]. Either use a Standard specialization or define _ENFORCE_FACET_SPECIALIZATIONS=0 to suppress this diagnostic.\0" ;
pub const _STL_OPTIMIZE_SYSTEM_ERROR_OPERATORS: u32 = 1;
pub const _STD_VECTORIZE_WITH_FLOAT_CONTROL: u32 = 1;
pub const __cpp_lib_chrono_udls: u32 = 201304;
pub const __cpp_lib_complex_udls: u32 = 201309;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const __cpp_lib_make_unique: u32 = 201304;
pub const __cpp_lib_null_iterators: u32 = 201304;
pub const __cpp_lib_quoted_string_io: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const __cpp_lib_shared_timed_mutex: u32 = 201402;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __cpp_lib_addressof_constexpr: u32 = 201603;
pub const __cpp_lib_allocator_traits_is_always_equal: u32 = 201411;
pub const __cpp_lib_as_const: u32 = 201510;
pub const __cpp_lib_bool_constant: u32 = 201505;
pub const __cpp_lib_enable_shared_from_this: u32 = 201603;
pub const __cpp_lib_incomplete_container_elements: u32 = 201505;
pub const __cpp_lib_invoke: u32 = 201411;
pub const __cpp_lib_logical_traits: u32 = 201510;
pub const __cpp_lib_map_try_emplace: u32 = 201411;
pub const __cpp_lib_nonmember_container_access: u32 = 201411;
pub const __cpp_lib_shared_mutex: u32 = 201505;
pub const __cpp_lib_transparent_operators: u32 = 201510;
pub const __cpp_lib_type_trait_variable_templates: u32 = 201510;
pub const __cpp_lib_uncaught_exceptions: u32 = 201411;
pub const __cpp_lib_unordered_map_try_emplace: u32 = 201411;
pub const __cpp_lib_void_t: u32 = 201411;
pub const __cpp_lib_chrono: u32 = 201510;
pub const __cpp_lib_atomic_value_initialization: u32 = 201911;
pub const __cpp_lib_shared_ptr_arrays: u32 = 201611;
pub const __cpp_lib_experimental_erase_if: u32 = 201411;
pub const __cpp_lib_experimental_filesystem: u32 = 201406;
pub const _STL_WIN32_WINNT_WINXP: u32 = 1281;
pub const _STL_WIN32_WINNT_VISTA: u32 = 1536;
pub const _STL_WIN32_WINNT_WIN8: u32 = 1538;
pub const _STL_WIN32_WINNT_WINBLUE: u32 = 1539;
pub const _STL_WIN32_WINNT_WIN10: u32 = 2560;
pub const _STL_WIN32_WINNT: u32 = 1536;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _CRT_WARN: u32 = 0;
pub const _CRT_ERROR: u32 = 1;
pub const _CRT_ASSERT: u32 = 2;
pub const _CRT_ERRCNT: u32 = 3;
pub const _CRTDBG_MODE_FILE: u32 = 1;
pub const _CRTDBG_MODE_DEBUG: u32 = 2;
pub const _CRTDBG_MODE_WNDW: u32 = 4;
pub const _CRTDBG_REPORT_MODE: i32 = -1;
pub const _CRT_RPTHOOK_INSTALL: u32 = 0;
pub const _CRT_RPTHOOK_REMOVE: u32 = 1;
pub const _HOOK_ALLOC: u32 = 1;
pub const _HOOK_REALLOC: u32 = 2;
pub const _HOOK_FREE: u32 = 3;
pub const _CRTDBG_ALLOC_MEM_DF: u32 = 1;
pub const _CRTDBG_DELAY_FREE_MEM_DF: u32 = 2;
pub const _CRTDBG_CHECK_ALWAYS_DF: u32 = 4;
pub const _CRTDBG_RESERVED_DF: u32 = 8;
pub const _CRTDBG_CHECK_CRT_DF: u32 = 16;
pub const _CRTDBG_LEAK_CHECK_DF: u32 = 32;
pub const _CRTDBG_CHECK_EVERY_16_DF: u32 = 1048576;
pub const _CRTDBG_CHECK_EVERY_128_DF: u32 = 8388608;
pub const _CRTDBG_CHECK_EVERY_1024_DF: u32 = 67108864;
pub const _CRTDBG_CHECK_DEFAULT_DF: u32 = 0;
pub const _CRTDBG_REPORT_FLAG: i32 = -1;
pub const _FREE_BLOCK: u32 = 0;
pub const _NORMAL_BLOCK: u32 = 1;
pub const _CRT_BLOCK: u32 = 2;
pub const _IGNORE_BLOCK: u32 = 3;
pub const _CLIENT_BLOCK: u32 = 4;
pub const _MAX_BLOCKS: u32 = 5;
pub const _UNKNOWN_BLOCK: i32 = -1;
pub const _CRT_MSVCP_CURRENT: &'static [u8; 13usize] = b"msvcp140.dll\0";
pub const _HAS_ITERATOR_DEBUGGING: u32 = 0;
pub const _SECURE_SCL: u32 = 0;
pub const _ITERATOR_DEBUG_LEVEL: u32 = 0;
pub const _CONTAINER_DEBUG_LEVEL: u32 = 0;
pub const _ENABLE_ATOMIC_REF_ALIGNMENT_CHECK: u32 = 0;
pub const _DEBUG_AFFIX: &'static [u8; 1usize] = b"\0";
pub const _IDL_DEFAULT: u32 = 0;
pub const _LIB_STEM: &'static [u8; 8usize] = b"libcpmt\0";
pub const _IDL_AFFIX: &'static [u8; 1usize] = b"\0";
pub const _MAX_EXP_DIG: u32 = 8;
pub const _MAX_INT_DIG: u32 = 32;
pub const _MAX_SIG_DIG_V1: u32 = 36;
pub const _MAX_SIG_DIG_V2: u32 = 768;
pub const _LOCK_LOCALE: u32 = 0;
pub const _LOCK_MALLOC: u32 = 1;
pub const _LOCK_STREAM: u32 = 2;
pub const _LOCK_DEBUG: u32 = 3;
pub const _LOCK_AT_THREAD_EXIT: u32 = 4;
pub const _STD_ATOMIC_ALWAYS_USE_CMPXCHG16B: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub type va_list = *mut crate::include::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_va_list_is_reference {
    pub _address: u8,
}
pub const __vcrt_va_list_is_reference___the_value: __vcrt_va_list_is_reference__bindgen_ty_1 =
    __vcrt_va_list_is_reference__bindgen_ty_1::__the_value;
#[repr(u8)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum __vcrt_va_list_is_reference__bindgen_ty_1 {
    __the_value = 0,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __vcrt_assert_va_start_is_not_reference {
    pub _address: u8,
}
pub type size_t = crate::include::raw::c_ulonglong;
pub type __vcrt_bool = bool;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const u16,
        _FunctionName: *const u16,
        _FileName: *const u16,
        _LineNo: crate::include::raw::c_uint,
        _Reserved: usize,
    );
}
pub type errno_t = crate::include::raw::c_int;
pub type wint_t = crate::include::raw::c_ushort;
pub type wctype_t = crate::include::raw::c_ushort;
pub type __time32_t = crate::include::raw::c_long;
pub type __time64_t = crate::include::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const crate::include::raw::c_ushort,
    pub _locale_mb_cur_max: crate::include::raw::c_int,
    pub _locale_lc_codepage: crate::include::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: crate::include::raw::c_ulong,
    pub _Byte: crate::include::raw::c_ushort,
    pub _State: crate::include::raw::c_ushort,
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = size_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_nothrow_t {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}?nothrow@std@@3Unothrow_t@1@B"]
    pub static std_nothrow: std_nothrow_t;
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum std__Uninitialized {
    _Noinit = 0,
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Lockit {
    pub _Locktype: crate::include::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}?_Lockit_ctor@_Lockit@std@@SAXH@Z"]
    pub fn std__Lockit__Lockit_ctor(arg1: crate::include::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}?_Lockit_dtor@_Lockit@std@@SAXH@Z"]
    pub fn std__Lockit__Lockit_dtor(arg1: crate::include::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}??0_Lockit@std@@QEAA@XZ"]
    pub fn std__Lockit__Lockit(this: *mut std__Lockit);
}
extern "C" {
    #[link_name = "\u{1}??0_Lockit@std@@QEAA@H@Z"]
    pub fn std__Lockit__Lockit1(this: *mut std__Lockit, arg1: crate::include::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}??_D_Lockit@std@@QEAAXXZ"]
    pub fn std__Lockit__Lockit_destructor(this: *mut std__Lockit);
}
impl std__Lockit {
    #[inline]
    pub unsafe fn _Lockit_ctor(arg1: crate::include::raw::c_int) {
        std__Lockit__Lockit_ctor(arg1)
    }
    #[inline]
    pub unsafe fn _Lockit_dtor(arg1: crate::include::raw::c_int) {
        std__Lockit__Lockit_dtor(arg1)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        std__Lockit__Lockit(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: crate::include::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        std__Lockit__Lockit1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std__Lockit__Lockit_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std__Init_locks {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}??0_Init_locks@std@@QEAA@XZ"]
    pub fn std__Init_locks__Init_locks(this: *mut std__Init_locks);
}
extern "C" {
    #[link_name = "\u{1}??_D_Init_locks@std@@QEAAXXZ"]
    pub fn std__Init_locks__Init_locks_destructor(this: *mut std__Init_locks);
}
impl std__Init_locks {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::core::mem::MaybeUninit::uninit();
        std__Init_locks__Init_locks(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std__Init_locks__Init_locks_destructor(self)
    }
}
pub type _HFILE = *mut crate::include::raw::c_void;
pub type _CRT_REPORT_HOOK = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: crate::include::raw::c_int,
        arg2: *mut crate::include::raw::c_char,
        arg3: *mut crate::include::raw::c_int,
    ) -> crate::include::raw::c_int,
>;
pub type _CRT_REPORT_HOOKW = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: crate::include::raw::c_int,
        arg2: *mut u16,
        arg3: *mut crate::include::raw::c_int,
    ) -> crate::include::raw::c_int,
>;
pub type _CRT_ALLOC_HOOK = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: crate::include::raw::c_int,
        arg2: *mut crate::include::raw::c_void,
        arg3: size_t,
        arg4: crate::include::raw::c_int,
        arg5: crate::include::raw::c_long,
        arg6: *const crate::include::raw::c_uchar,
        arg7: crate::include::raw::c_int,
    ) -> crate::include::raw::c_int,
>;
pub type _CRT_DUMP_CLIENT = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut crate::include::raw::c_void, arg2: size_t),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CrtMemBlockHeader {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CrtMemState {
    pub pBlockHeader: *mut _CrtMemBlockHeader,
    pub lCounts: [size_t; 5usize],
    pub lSizes: [size_t; 5usize],
    pub lHighWaterCount: size_t,
    pub lTotalCount: size_t,
}
pub type int_least8_t = crate::include::raw::c_schar;
pub type int_least16_t = crate::include::raw::c_short;
pub type int_least32_t = crate::include::raw::c_int;
pub type int_least64_t = crate::include::raw::c_longlong;
pub type uint_least8_t = crate::include::raw::c_uchar;
pub type uint_least16_t = crate::include::raw::c_ushort;
pub type uint_least32_t = crate::include::raw::c_uint;
pub type uint_least64_t = crate::include::raw::c_ulonglong;
pub type int_fast8_t = crate::include::raw::c_schar;
pub type int_fast16_t = crate::include::raw::c_int;
pub type int_fast32_t = crate::include::raw::c_int;
pub type int_fast64_t = crate::include::raw::c_longlong;
pub type uint_fast8_t = crate::include::raw::c_uchar;
pub type uint_fast16_t = crate::include::raw::c_uint;
pub type uint_fast32_t = crate::include::raw::c_uint;
pub type uint_fast64_t = crate::include::raw::c_ulonglong;
pub type intmax_t = crate::include::raw::c_longlong;
pub type uintmax_t = crate::include::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
